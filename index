<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Contador de Tags RFID (API)</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            margin: 0;
            background-color: #f0f0f0;
            flex-direction: column;
        }
        #counter-container {
            background-color: #ffffff;
            padding: 40px 60px;
            border-radius: 10px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            text-align: center;
        }
        h1 {
            color: #333;
            margin-bottom: 20px;
        }
        #tag-count {
            font-size: 8em;
            color: #007bff;
            font-weight: bold;
            margin-bottom: 20px;
        }
        #last-tag {
            font-size: 1.2em;
            color: #555;
        }
        #status {
            margin-top: 20px;
            font-size: 1em;
            color: #666;
        }
    </style>
</head>
<body>
    <div id="counter-container">
        <h1>Contador de Tags RFID</h1>
        <div id="tag-count">0</div>
        <div id="last-tag">Última Tag Lida: Nenhuma</div>
    </div>
    <div id="status">Status: Carregando...</div>

    <script>
        const tagCountElement = document.getElementById('tag-count');
        const lastTagElement = document.getElementById('last-tag');
        const statusElement = document.getElementById('status');

        // IMPORTANTE: Substitua pela URL da sua API (Ex: Heroku app URL)
        const apiBaseUrl = "https://seu-nome-do-app-rfid-unico.herokuapp.com"; // Substitua!

        async function fetchTagStatus() {
            try {
                statusElement.textContent = "Status: Conectando à API...";
                const response = await fetch(`${apiBaseUrl}/status`);
                
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const data = await response.json();
                
                tagCountElement.textContent = data.count;
                lastTagElement.textContent = `Última Tag Lida: ${data.lastTag}`;
                statusElement.textContent = `Status: Conectado. Última atualização: ${new Date().toLocaleTimeString()}`;
            } catch (error) {
                console.error("Erro ao buscar status da tag:", error);
                statusElement.textContent = `Status: Erro de conexão com a API. Tentando novamente...`;
            }
        }

        // Chama a função para buscar o status a cada X milissegundos (polling)
        const pollingInterval = 2000; // 2 segundos
        setInterval(fetchTagStatus, pollingInterval);

        // Chama uma vez ao carregar a página para o estado inicial
        window.onload = fetchTagStatus;
    </script>
</body>
</html>
